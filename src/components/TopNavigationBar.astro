---
import Button from "./system/Button.astro";
import Text from "./system/Text.astro";
import logo from "../images/logo.png";
import config from "../../config";

interface Menu {
  title: string;
  link?: string;
  submenu?: {
    title: string;
    link: string;
    forceInactive?: boolean;
  }[];
}
const menu: Array<Menu> = [
  {
    title: "Home",
    link: "/",
  },
  {
    title: "About Us",
    link: "/about-us",
  },
  {
    title: "Our Programs",
    link: "/program",
  },
  {
    title: "Curriculum",
    link: "/curriculum",
  },
  {
    title: "Find a Center",
    link: "/#find-a-center",
  },
  {
    title: "Admissions",
    link: "/admissions",
  },
  {
    title: "Franchise",
    link: "/franchise",
  },
  {
    title: "Blogs",
    link: "/blogs",
  },

];

// get route from path
const { campusName } = Astro.params;
const campusConfig = config.campus.find((c) => c.internalName === campusName);
const admissionLink =
  campusConfig?.admissionLink || config.campus[0].admissionLink;
const ctaButtons: Array<{
  title: string;
  link: string | undefined;
  type?: "primary" | "secondary" | "default";
  icon?: any;
  className?: string;
  menu?: boolean;
}> = [

  // {
  //   title: 'Login',
  //   link: config.ctaLink,
  //   type: 'default',
  //   menu: true,

  //   icon: ExternalIcon,
  // }
];

const activePath = Astro.url.pathname;

const removeHash = url => {
  const hashIndex = url.indexOf('#')
  if (hashIndex === -1) return url
  return url.slice(0, hashIndex)
}

const shouldBeActive = (item, activePath) => {
  // item.link === activePath ||
  // item.submenu.map(({ link }) => removeHash(link)).includes(activePath)
  const submenuItem = item.submenu.find(({ link }) => {
    const active = removeHash(link) === activePath
    return active
  })
  console.log('submenuItem...', submenuItem)


  return item.link === activePath || (!!submenuItem && !submenuItem.forceInactive)
}

const maxsm = (stringOfClasses) => {
  const classess = stringOfClasses.split(' ')
  return classess.map(c => `max-sm:${c}`).join(' ')
}
---
<div class="fixed z-[999]">

  <header
    class=`font-roundo w-screen m relative  py-1
    pl-10 px-14 box-border flex flex-row
    justify-between items-center h-[130px] max-sm:h-[60px]
    max-sm:bg-white max-sm:mt-3 max-sm:w-[95vw]
    max-sm:border-[2px] max-sm:border-[#F6BD60] max-sm:border-solid max-sm:py-[19px]
    max-sm:rounded-[5rem] max-sm:mx-[2.5vw] max-sm:px-[28px]
    max-sm:mt-[20px]
    `
    >
    <div class="flex flex-row items-center">
      <a href="/" class="relative z-[9999] daisy daisy-fixed daisy-1 w-[195px] max-sm:w-[60%] max-sm:max-w-[260px] max-md:pl-4 max-sm:p-0">
        <img src={logo.src} alt="Little Elly's Logo" class="w-[135px] max-md:w-[80px]" />
      </a>
    </div>
    <div class="max-md:block hidden relative z-[9999]">
      <form autocomplete="off">
        <div id="menuToggle">
          <input class="menu-checkbox" type="checkbox" />
          <span></span>
          <span></span>
          <span></span>
        </div>
      </form>
    </div>
    <div class="flex flex-row items-center max-md:hidden text-lg flex-shrink-0 border-[3px] border-[#F6BD60]	border-solid py-[19px] px-[48px] rounded-[5rem]"
      style={{
        background: 'rgba(253, 253, 253, 1)',

        boxShadow: "0px 3.24px 15px 0px rgba(0, 0, 0, 0.05)",
      }}
    >
      {
        menu.map((item, i) => {
          if (item.submenu && item.submenu.length > 0) {
            return (
              <div
                class={`relative menu-parent cursor-pointer daisy daisy-2 daisy-fixed `}
              >
                <div
                  class:list={[
                    "flex flex-row items-center mr-8 max-md:mr-0",
                    i >= menu.length - 1 && "mr-0 max-md:mr-0",
                  ]}
                >
                  {item.link ? (
                    <a
                      href={item.link}
                      class:list={[
                        "text-black font-semibold title-section hover:underline font-display uppercase",
                        shouldBeActive(item, activePath) && "!text-primary",
                      ]}
                    >
                      {item.title}
                    </a>
                  ) : (
                    <span
                      class:list={["text-black font-semibold title-section hover:underline font-display uppercase",
                      shouldBeActive(item, activePath) && "!text-primary",
                    ]}
                    >
                      {item.title}
                    </span>
                  )}
                  <div class="w-6 h-6 ml-1">
                    <svg
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M5.94524 9.20954C6.16089 8.95794 6.53967 8.9288 6.79127 9.14446L12.0008 13.6098L17.2103 9.14446C17.4619 8.9288 17.8407 8.95794 18.0563 9.20954C18.272 9.46113 18.2429 9.83991 17.9913 10.0556L12.3913 14.8556C12.1666 15.0482 11.835 15.0482 11.6103 14.8556L6.01032 10.0556C5.75872 9.83991 5.72958 9.46113 5.94524 9.20954Z"
                        class={
                          shouldBeActive(item, activePath) ? "fill-primary" : "fill-black"
                        }
                      />
                    </svg>
                  </div>
                </div>
                <div
                  class="absolute w-[250px] pt-[10px] menu bg-white"
                >
                  <div class="w-full h-full bg-white" style={{
                    boxShadow: "0px 10px 20px rgba(0, 0, 0, 0.1)",
                  }}>
                    {item.submenu.map((subitem, j) => (
                      <div
                        class="py-[14px] px-3"
                        style={{
                          borderBottom:
                            j >= item?.submenu?.length - 1
                              ? "none"
                              : "1px solid rgba(0, 0, 0, 0.2)",
                        }}
                      >
                        <a
                          href={subitem.link}
                          class:list={[
                            "text-black font-semibold hover:underline font-display",
                            // subitem.link === activePath && '!text-primary'
                          ]}
                        >
                          {subitem.title}
                        </a>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            );
          } else if (item.link) {
            return (
              <a
                href={item?.link}
                class:list={[
                  "text-[#00204D] font-[300] hover:underline  mr-8 max-md:mr-0 daisy daisy-fixed daisy-2 font-display uppercase font-semibold",
                  item.link === activePath && "!text-primary !font-bold",
                ]}
              >
                {item.title}
              </a>
            );
          }
        })
      }
    </div>




    <div class="mobileMenu z-[999] fixed top-0 left-0 w-screen h-screen bg-[#fff6ea] flex flex-col pt-24 overflow-scroll" class="max-md:visible hidden">
      {menu.map(item => {
        if (item.submenu && item.submenu.length > 0) {
          return (
            <div class='mobileMenuParent'>
              <div class='relative py-[14px] px-5 mr-8 max-md:mr-0 w-full' style={{
                borderBottom: '1px solid rgba(0, 0, 0, 0.2)'
              }}>
                <div class='flex flex-row w-full'>
                  <span
                    class="text-black font-semibold hover:underline"
                  >{item.title}</span>
                  <div class='w-6 h-6 ml-1 -rotate-90 menu-arrow'>
                    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path fill-rule="evenodd" clip-rule="evenodd" d="M5.94524 9.20954C6.16089 8.95794 6.53967 8.9288 6.79127 9.14446L12.0008 13.6098L17.2103 9.14446C17.4619 8.9288 17.8407 8.95794 18.0563 9.20954C18.272 9.46113 18.2429 9.83991 17.9913 10.0556L12.3913 14.8556C12.1666 15.0482 11.835 15.0482 11.6103 14.8556L6.01032 10.0556C5.75872 9.83991 5.72958 9.46113 5.94524 9.20954Z" fill="black"/>
                    </svg>
                  </div>
                </div>
              </div>
              <div class="subMenu flex flex-col">
                {item.submenu.map((subMenuItem) => (
                  <a
                    href={subMenuItem.link}
                    data-menu-mobile-item
                    class="relative py-[14px] px-5 mr-8 max-md:mr-0 w-full text-black font-semibold hover:underline pl-10"
                    style={{
                      borderBottom: "1px solid rgba(0, 0, 0, 0.2)",
                    }}
                  >
                      {subMenuItem.title}
                  </a>
                ))}
              </div>
            </div>
          )
        } else {
          return (
            <div class='mobileMenuParent'>
              <a data-menu-mobile-item href={item.link} class='text-black font-semibold hover:underline flex flex-row gap-2 items-center first-letter:relative py-[14px] px-5 mr-8 max-md:mr-0 w-full' style={{
                borderBottom: '1px solid rgba(0, 0, 0, 0.2)'
              }}>
                  {item.title}
              </a>
            </div>
          )
        }
      })}
    </div>

    <div class="hidden">
      <div
        style={{
          width: "18px",
          height: "1.5px",
          color: "#fff",
          backgroundColor: "#fff",
          // transform: 'rotate(180deg)',
        }}
      >
      </div>
      <div
        style={{
          width: "18px",
          height: "1.5px",
          color: "#fff",
          backgroundColor: "#fff",
          marginTop: "3.5px",
          // transform: 'rotate(180deg)',
        }}
      >
      </div>
      <div
        style={{
          width: "18px",
          height: "1.5px",
          color: "#fff",
          backgroundColor: "#fff",
          marginTop: "3.5px",
          // transform: 'rotate(180deg)',
        }}
      >
      </div>
    </div>
  </header>
</div>

<style>
  .menu {
    opacity: 0;
    pointer-events: none;
    transform: translateY(10px);
    transition: all 0.3s ease;
  }
  .menu.visible {
    opacity: 1;
    pointer-events: all;
    transform: translateY(0px);
  }

  #menuToggle {
    display: block;
    position: relative;

    z-index: 1;
    position: relative;
    top: 4px;

    -webkit-user-select: none;
    user-select: none;
  }

  #menuToggle input {
    display: block;
    width: 40px;
    height: 32px;
    position: absolute;
    top: -7px;
    left: -5px;

    cursor: pointer;

    opacity: 0; /* hide this */
    z-index: 2; /* and place it over the hamburger */

    -webkit-touch-callout: none;
  }

  /*
  * Just a quick hamburger
  */
  #menuToggle span {
    display: block;
    width: 25px;
    height: 2px;
    margin-bottom: 5px;
    position: relative;

    background: #FF6F24;
    border-radius: 3px;

    z-index: 1;

    transform-origin: 4px 0px;

    transition:
      transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1),
      background 0.5s cubic-bezier(0.77, 0.2, 0.05, 1),
      opacity 0.55s ease;
  }

  #menuToggle span:first-child {
    transform-origin: 0% 0%;
  }

  #menuToggle span:nth-last-child(2) {
    transform-origin: 0% 100%;
  }

  /*
  * Transform all the slices of hamburger
  * into a crossmark.
  */

  #menuToggle input:checked ~ span:nth-last-child(3) {
    opacity: 1;
    transform: rotate(45deg) translate(0px, -1px);
    /*   background: #232323; */
  }

  #menuToggle input:checked ~ span:nth-last-child(1) {
    opacity: 1;
    transform: rotate(-45deg) translate(1px, -2px);
    /*   background: #232323; */
  }

  /*
  * But let's hide the middle one.
  */
  #menuToggle input:checked ~ span:nth-last-child(2) {
    opacity: 0;
    transform: rotate(0deg) scale(0.2, 0.2);
  }

  /*
  * Ohyeah and the last one should go the other direction
  */
  #menuToggle input:checked ~ span:nth-last-child(2) {
    transform: rotate(-45deg) translate(0, -1px);
  }

  .mobileMenu {
    opacity: 0;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    pointer-events: none;
  }
  .mobileMenu.visible {
    opacity: 1;
    transform: translateY(0px);
    pointer-events: all;
  }

  .mobileMenuParent .subMenu {
    /* opacity: 0; */
    /* transform: translateY(-10px); */
    transition: all 0.3s ease;
    /* pointer-events: none; */
    max-height: 0;
    overflow: hidden;
  }
</style>

<script>
  const title = document.querySelectorAll('title-section') as HTMLDivElement
  const menuParent = document.querySelectorAll(
    ".menu-parent"
  ) as NodeListOf<HTMLDivElement>;
  const menuCheckBox = document.querySelector(
    ".menu-checkbox"
  ) as HTMLInputElement;
  const menuChild = document.querySelectorAll(
    ".menu"
  ) as NodeListOf<HTMLDivElement>;
  menuParent.forEach((el) => {
    let removeTimeout: any = null;
    const menu = el.querySelector(".menu") as HTMLDivElement;
    el.addEventListener("mouseover", () => {
      clearTimeout(removeTimeout);
      menuChild.forEach((elC) => {
        if (elC !== menu) {
          console.log("elC...", elC);
          console.log("el...", el);
          elC.classList.remove("visible");
        }
      });
      setTimeout(() => {
        menu.classList.add("visible");
      }, 0);
    });
    el.addEventListener("mouseout", () => {
      removeTimeout = setTimeout(() => {
        menu.classList.remove("visible");
      }, 50);
    });
    menu.addEventListener("mouseover", () => {
      clearTimeout(removeTimeout);
    });
    menu.addEventListener("mouseout", () => {
      menu.classList.remove('visible')
    });
  });

  // mobile menu
  const menuToggle = document.querySelector("#menuToggle") as HTMLInputElement;
  const mobileMenu = document.querySelector(".mobileMenu") as HTMLDivElement;
  const mobileMenuItems = mobileMenu.querySelectorAll('[data-menu-mobile-item]');
  const mobileMenuButton = document.querySelector('input.menu-checkbox')

    mobileMenuItems.forEach(menuItem => {
      menuItem.addEventListener('click', ()=>{
        mobileMenu.classList.remove('visible')
        mobileMenuButton.checked = false;
      })
    });

  menuToggle.addEventListener("click", () => {

    mobileMenu.classList.toggle("visible");


  });
  const mobileMenuParents = document.querySelectorAll(
    ".mobileMenuParent"
  ) as NodeListOf<HTMLDivElement>;

  mobileMenuParents.forEach((el) => {
    const subMenu = el.querySelector(".subMenu") as HTMLDivElement;
    el.addEventListener("click", () => {
      if(subMenu){
      subMenu.classList.toggle("visible");
      if (subMenu.classList.contains("visible")) {
        subMenu.style.maxHeight = "100vh";
      } else {
        subMenu.style.maxHeight = "0px";
      }}
    });
  });
  // document.addEventListener('astro:beforeload', () => {
  //   console.log('helllo... 11')
  //   const path = window.location.pathname
  //   const campuseName = path.split('-')[1]
  //   const campusConfig = config.campus.find(c => c.internalName === campuseName)
  //   let admissionLink = campusConfig?.admissionLink
  //   console.log('admissionLink...')
  //   if (!admissionLink) {
  //     admissionLink = config.campus[0].admissionLink
  //   }
  //   const button = document.querySelector('.apply-now-button') as HTMLDivElement
  //   if(admissionLink){
  //     button.setAttribute('href', admissionLink)
  //   }

  //   mobileMenu.classList.remove('visible')
  //   menuCheckBox.checked = false
  // })
</script>
