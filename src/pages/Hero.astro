---
import Button from "../components/system/Button.astro";
import Text from "../components/system/Text.astro";
import Image from "../components/system/Image.astro";

const {
  config,
  showSlide,
  slideImages,
  showCta = true,
  className,
  style,
  buttonDetails,
  contentDirection = "item-center",
  bgImageBgColor = "linear-gradient(360deg, rgba(27, 34, 38, 0.8) 0%, rgba(5, 43, 76, 0.2) 52.08%, rgba(19, 112, 167, 0.2) 100%)",
} = Astro.props;

const bgImage = showSlide ? slideImages : config.bgImage;
const previewImage = config?.previewImage;
const title = config?.title;
const subHeading = config?.subHeading;
const topHeading = config?.topHeading;
const description = config?.description;

---

<div
  class=`font-roundo w-full h-full bg-cover bg-top relative bg-black flex flex-col ${className}`
>
  <!-- <div class='h-[72.6px] w-full bg-black'>
  </div> -->
  <div
    class=`w-full h-full relative flex ${contentDirection}`
    style={{
      ...style,
    }}
  >
    {
      showSlide ? (
        slideImages.map(
          (
            {
              slide,
              position,
              type = 'image',
            }: { slide: string; position: string; type: string },
            i: number
          ) =>
            type === "image" ? (
              <div
                class:list={[
                  "slideshow-item w-full h-full absolute top-0 left-0 bg-no-repeat bg-cover",
                  i === 0 ? "opacity-1" : "opacity-0",
                  `slide-${i}`,
                ]}
                style={{
                  backgroundImage: `${bgImageBgColor}, url(${slide})`,
                  transition: "1s all ease-in-out",
                  backgroundPosition: position,
                }}
              />
            ) : (
              <div class="absolute top-0 left-0 w-full h-full">
                <video
                  class:list={[
                    "slideshow-item absolute top-0 left-0 lazy play-on-hover w-full h-full object-cover",
                    i === 0 ? "opacity-1" : "opacity-0",
                    `slide-${i}`,
                  ]}
                  loop
                  autoplay
                >
                  <source data-src={"." + slide} src={slide} type="video/mp4" />
                </video>
                <div
                  class="absolute w-full h-full"
                  style={{
                    background:
                      "linear-gradient(180deg, rgba(0,0,0,0.1) 0%, rgba(0,0,0, 1) 100%)",
                    opacity: 0.5,
                  }}
                />
              </div>
            )
        )
      ) : (
        <div
          class="w-full h-full absolute top-0 left-0 bg-no-repeat bg-cover"
          style={{
            backgroundImage: `linear-gradient(10deg, rgba(10, 10, 10, 0.7) 14.86%, rgba(0, 0, 0, 0.00) 76.82%), url(${bgImage})`,
            transition: "1s all  ease-in-out",
            backgroundPosition: "center",
            // filter: 'invert'
          }}
        />
      )
    }

    <div
      class="flex p-xl items-center text-white justify-between w-full max-sm:p-l"
    >
      <div class={`flex gap-r flex-col relative z-10 max-sm:mt-auto`}>
        <div class="flex gap-r flex-col">
          <slot name="topHeading font-display">
            {
              topHeading ? (
                <Text type="h4" class="uppercase">
                  {topHeading}
                </Text>
              ) : null
            }
          </slot>
          <slot name="title">
            {
              title ? (
                <Text type="h2" class="uppercase w-[18ch] text-yellow">
                  {title}
                </Text>
              ) : null
            }
          </slot>
          <slot name="subHeading">
            {
              subHeading ? (
                <Text type="h4" class="uppercase">
                  {subHeading}
                </Text>
              ) : null
            }
          </slot>
        </div>
        <slot name="ctaButton">
          {showCta ? <a href={buttonDetails?.buttonHypelink}><Button>{buttonDetails?.buttonName}</Button></a> : null}
        </slot>
      </div>
      <slot name="description">
        {
          description ? (
            <Text type="p" class="w-[37ch]">
              {description}
            </Text>
          ) : null
        }
      </slot>
      <slot name="previewImage">
        {
          previewImage ? (
            <Image
              alt="Preview Image"
              src={previewImage}
              className="w-[300px] h-auto object-cover object-center z-[90]"
            />
          ) : null
        }
      </slot>
    </div>
  </div>
</div>

<script>
  const slideshowItems = Array.from(
    document.querySelectorAll<HTMLElement>(".slideshow-item")
  );
  let slideshowIndex = 0;
  let interval: string | number | NodeJS.Timer | undefined;
  if (slideshowItems.length !== 0) {
    function moveSlides() {
      const items = Array.from(
        document.querySelectorAll<HTMLElement>(".slideshow-item")
      );
      items.forEach((item, i) => {
        if (i === slideshowIndex) {
          if (item.tagName === "video") {
            item.currentTime = 0;
            item.play();
          }
          item.style.opacity = "1";
          return;
        } else {
          item.style.opacity = "0";
        }
      });
      slideshowIndex = (slideshowIndex + 1) % items.length;
    }

    let texts = Array.from(document.querySelectorAll<HTMLElement>(".text"));
    let counter = 0;
    let interval: string | number | NodeJS.Timer | undefined;

    const textArray = ["excellence", "innovation", "achievements"];

    function moveTextOneByOne() {
      texts.forEach((text, index) => {
        if (index === counter) {
          text.style.opacity = "1";
          text.style.transform = "translateY(0)";
        } else {
          text.style.opacity = "0";
          text.style.transform = "translateY(-42px)";
        }
      });
      counter = (counter + 1) % texts.length;
    }

    const init = () => {
      slideshowIndex = 0;
      clearInterval(interval);
      interval = setInterval(() => {
        moveSlides();
        moveTextOneByOne();
      }, 3000);
      moveSlides();
      moveTextOneByOne();
    };

    init();
    document.addEventListener("astro:beforeload", () => init());
  }
</script>
