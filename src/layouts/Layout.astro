---
export interface Props {
	title: string;
	description: string;
	keywords: string;
}
import "../global.css"
// import '../../node_modules/sal.js/dist/sal.css';
import "swiper/css";

import "swiper/css/navigation";
import "swiper/css/pagination";

import Text from '../components/system/Text.astro'
const { title = 'Best CBSE School in Bangalore | Little Elly School', description = '', keywords = '' } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<!-- <ViewTransitions /> -->

		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/x-icon" href="/favicon.ico">
		<!-- <link rel="stylesheet" href="node_modules/@glidejs/glide/dist/css/glide.core.min.css"> -->
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<meta name="description" content={description} />
		<meta name="keywords" content={keywords}>
		
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=DM+Sans:opsz,wght@9..40,400;9..40,500;9..40,700&family=DM+Serif+Display:ital@0;1&display=swap" rel="stylesheet">
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Grandstander:ital,wght@0,100;0,200;0,300;0,400;0,600;0,700;0,800;0,900;1,100;1,400;1,500;1,700;1,800;1,900&display=swap" rel="stylesheet">
			<link 
			href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;500;600;700&display=swap"
			rel="stylesheet" 
			type="text/css"
			media="print"
			onload="this.media='all'" 
		/>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap" rel="stylesheet">


	<script async
			src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAW4mmhYRbPA2nPi-wzuJBPalXSuInbKks&loading=async&libraries=places">
	</script>

	<meta name="google-site-verification" content="NJ4tgmOseMGl6oc_xeQT-UQKw1vbx2owj9meIVjGwR4" />

		<!-- <l	ink rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" /> -->


		<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-D2HX9MRRNV"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-D2HX9MRRNV");

			window.gtag = gtag;
    </script>

		<!-- Meta Pixel Code -->
		<script>
			!function(f,b,e,v,n,t,s)
			{if(f.fbq)return;n=f.fbq=function(){n.callMethod?
			n.callMethod.apply(n,arguments):n.queue.push(arguments)};
			if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
			n.queue=[];t=b.createElement(e);t.async=!0;
			t.src=v;s=b.getElementsByTagName(e)[0];
			s.parentNode.insertBefore(t,s)}(window, document,'script',
			'https://connect.facebook.net/en_US/fbevents.js');
			fbq('init', '4034878356533640');
			fbq('track', 'PageView');
		</script>
		<!-- End Meta Pixel Code -->
	
	</head>
	<body>

		<noscript><img height="1" width="1" style="display:none"
			src="https://www.facebook.com/tr?id=4034878356533640&ev=PageView&noscript=1"
			/></noscript>

			
		<slot />

		<div class="float w-12 h-12 bottom-10 right-10 max-md:w-10 max-md:y-6 max-md:bottom-1 max-md:right-2">
      <a href="https://api.whatsapp.com/send/?phone=+919900064613&text=Hi&type=phone_number&app_absent=0" class="w-full h-full" target="_blank" aria-label="Enquire us at Whatsapp">
        <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 48 48" fill-rule="evenodd" clip-rule="evenodd"><path fill="#fff" d="M4.868,43.303l2.694-9.835C5.9,30.59,5.026,27.324,5.027,23.979C5.032,13.514,13.548,5,24.014,5c5.079,0.002,9.845,1.979,13.43,5.566c3.584,3.588,5.558,8.356,5.556,13.428c-0.004,10.465-8.522,18.98-18.986,18.98c-0.001,0,0,0,0,0h-0.008c-3.177-0.001-6.3-0.798-9.073-2.311L4.868,43.303z"/><path fill="#fff" d="M4.868,43.803c-0.132,0-0.26-0.052-0.355-0.148c-0.125-0.127-0.174-0.312-0.127-0.483l2.639-9.636c-1.636-2.906-2.499-6.206-2.497-9.556C4.532,13.238,13.273,4.5,24.014,4.5c5.21,0.002,10.105,2.031,13.784,5.713c3.679,3.683,5.704,8.577,5.702,13.781c-0.004,10.741-8.746,19.48-19.486,19.48c-3.189-0.001-6.344-0.788-9.144-2.277l-9.875,2.589C4.953,43.798,4.911,43.803,4.868,43.803z"/><path fill="#fff" d="M24.014,5c5.079,0.002,9.845,1.979,13.43,5.566c3.584,3.588,5.558,8.356,5.556,13.428c-0.004,10.465-8.522,18.98-18.986,18.98h-0.008c-3.177-0.001-6.3-0.798-9.073-2.311L4.868,43.303l2.694-9.835C5.9,30.59,5.026,27.324,5.027,23.979C5.032,13.514,13.548,5,24.014,5 M24.014,42.974C24.014,42.974,24.014,42.974,24.014,42.974C24.014,42.974,24.014,42.974,24.014,42.974 M24.014,42.974C24.014,42.974,24.014,42.974,24.014,42.974C24.014,42.974,24.014,42.974,24.014,42.974 M24.014,4C24.014,4,24.014,4,24.014,4C12.998,4,4.032,12.962,4.027,23.979c-0.001,3.367,0.849,6.685,2.461,9.622l-2.585,9.439c-0.094,0.345,0.002,0.713,0.254,0.967c0.19,0.192,0.447,0.297,0.711,0.297c0.085,0,0.17-0.011,0.254-0.033l9.687-2.54c2.828,1.468,5.998,2.243,9.197,2.244c11.024,0,19.99-8.963,19.995-19.98c0.002-5.339-2.075-10.359-5.848-14.135C34.378,6.083,29.357,4.002,24.014,4L24.014,4z"/><path fill="#40c351" d="M35.176,12.832c-2.98-2.982-6.941-4.625-11.157-4.626c-8.704,0-15.783,7.076-15.787,15.774c-0.001,2.981,0.833,5.883,2.413,8.396l0.376,0.597l-1.595,5.821l5.973-1.566l0.577,0.342c2.422,1.438,5.2,2.198,8.032,2.199h0.006c8.698,0,15.777-7.077,15.78-15.776C39.795,19.778,38.156,15.814,35.176,12.832z"/><path fill="#fff" fill-rule="evenodd" d="M19.268,16.045c-0.355-0.79-0.729-0.806-1.068-0.82c-0.277-0.012-0.593-0.011-0.909-0.011c-0.316,0-0.83,0.119-1.265,0.594c-0.435,0.475-1.661,1.622-1.661,3.956c0,2.334,1.7,4.59,1.937,4.906c0.237,0.316,3.282,5.259,8.104,7.161c4.007,1.58,4.823,1.266,5.693,1.187c0.87-0.079,2.807-1.147,3.202-2.255c0.395-1.108,0.395-2.057,0.277-2.255c-0.119-0.198-0.435-0.316-0.909-0.554s-2.807-1.385-3.242-1.543c-0.435-0.158-0.751-0.237-1.068,0.238c-0.316,0.474-1.225,1.543-1.502,1.859c-0.277,0.317-0.554,0.357-1.028,0.119c-0.474-0.238-2.002-0.738-3.815-2.354c-1.41-1.257-2.362-2.81-2.639-3.285c-0.277-0.474-0.03-0.731,0.208-0.968c0.213-0.213,0.474-0.554,0.712-0.831c0.237-0.277,0.316-0.475,0.474-0.791c0.158-0.317,0.079-0.594-0.04-0.831C20.612,19.329,19.69,16.983,19.268,16.045z" clip-rule="evenodd"/></svg>
      </a>
      <div class="fixed bottom-11 right-24 bg-white px-3 py-1 rounded-2xl">
        <Text type='xs' class='text-black'>Enquire us at Whatsapp</Text>
      </div>
    </div>

	</body>
</html>
<style is:global>
	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
	}
	html {
		/* font-family: system-ui, sans-serif; */
		background-color: #fff;
		scroll-behavior:smooth;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}

	.float{
		position:fixed;
		/* background-color:#25d366; */
		color:#FFF;
		border-radius:50px;
		text-align:center;
		font-size:30px;
		/* box-shadow: 2px 2px 3px #999; */
		z-index:100;
	}

	.float > div {
		opacity: 0;
		transition: 0.6s all ease-in-out
	}
	.float a:hover ~ div {
		opacity: 1;
	}

	.my-float{
	margin-top:16px;
	}

</style>

<!--script plumb5-->
<script type="text/javascript">
	(function () {
		var p5 = document.createElement("script");
		p5.type = "text/javascript";
		p5.src = "https://src.plumb5.com/littleelly_com.js";
		var p5s = document.getElementsByTagName("script")[0];
		p5s.parentNode.insertBefore(p5, p5s);
	})();

</script>
	<!-- importScripts('https://littleelly.com/Pg_P5_Sw.js'); -->

<script>
  

	import { gsap } from "gsap";
      
  import { ScrollTrigger } from "gsap/ScrollTrigger";

	import Lenis from '@studio-freight/lenis'

	import Swiper from "swiper";
	import { Autoplay, Pagination } from "swiper/modules"

	Swiper.use([Autoplay, Pagination]);

	const swiper = new Swiper(".testimonial-swiper", {
		direction: "horizontal",
		loop: true,
		slidesPerView: 1.25,
		centeredSlides: true,
		spaceBetween: 10,
		speed: 700,
		// pagination: {
		//   el: ".swiper-pagination-testimonial",
		//   clickable: true,
		// },
		autoplay: {
			delay: 3000,
			disableOnInteraction: false,
		},
	});

	const prevBtn = document.querySelector("[data-prev-swiper='testimonial-swiper']");
	const nextBtn = document.querySelector("[data-next-swiper='testimonial-swiper']");

	if (prevBtn) {
		prevBtn.addEventListener('click', () => {
			swiper.slidePrev()
		})
	}

	if (nextBtn) {
		nextBtn.addEventListener('click', () => {
			swiper.slideNext()
		})
	}


	let lenis = null

	const isPhone = window.innerWidth < 768
	const shouldLenis = false
	// const shouldLenis = !window.location.href.includes('/blogs') && !isPhone
	// if url contains blog
	if (shouldLenis) {
		lenis = new Lenis({
			duration: 0.6,
			// easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t))
		})
	
		lenis.on('scroll', ScrollTrigger.update)

	}

	gsap.registerPlugin(ScrollTrigger);
	if (shouldLenis && lenis) {
		gsap.ticker.add((time)=>{
			lenis.raf(time * 1000)
		})
	
		gsap.ticker.lagSmoothing(0)
	}

	// Hero Section Animations

	const leftCloud = document.querySelector('[data-left-cloud]')
	const rightCloud = document.querySelector('[data-right-cloud]')
	const heroContainer = document.querySelector('[data-hero-container]')
	const heroTopAnimal = document.querySelectorAll('[data-hero-top-animal]')
	const dataClouds = document.querySelectorAll('[data-cloud]')



	leftCloud?.querySelectorAll('path').forEach((path, i) => {
		gsap.to(path, {
			x: -230,
			y: -230,
			duration: 0.7 + i * 0.2,
			delay: 0.1 + i * 0.1,
			
		});
	})

	rightCloud?.querySelectorAll('path').forEach((path, i) => {
		gsap.to(path, {
			x: 400,
			y: -230,
			duration: 0.7 + i * 0.2,
			delay: 0.1 + i * 0.1,
			
		});
	})


	gsap.to(heroContainer, {
    scale: 0.9,
    opacity: 0,
    duration: 3,
    scrollTrigger: {
      trigger: '[data-parent="hero-student"]', 
			start: "0% 48%",
			end: "40% 20%",
      scrub: true,
    }
  });
	
	heroTopAnimal.forEach((animal, i) => {
		gsap.to(animal, {
			y: (20 + i * 80) * -1,
			scale: 0.8 + i * 0.3,
			opacity: 0,
			// opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: '[data-parent="hero-student"]', 
				start: "0% 48%",
				end: "40% 20%",
				scrub: true,
			}
		});
	})


	dataClouds.forEach((cloud) => {
		const cloudIndex = Number(cloud.dataset.cloud)
		gsap.to(cloud, {
			x: cloudIndex === 1 ? -200 : 200,
			opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: document.querySelector('[data-parent="hero-container"]'), 
				start: "100% 50%",
				end: "140% 20%",
				scrub: true,
			}
		});
	})

	const heroSectionParallax = document.querySelector('[data-hero-section-parallax]')?.children || []

	gsap.to(heroSectionParallax[3], {
		y: -80 * 2.8,
		duration: 3,
		scrollTrigger: {
			trigger: '[data-hero-section-parallax]', 
			start: "70% 90%",
			end: "70% 0%",
			scrub: true,
		}
	})



	const appearElements = document.querySelectorAll('[data-appear]')
	

	appearElements.forEach(element => {
		if (element.dataset.appear === "false") return
		const order = element.dataset.appear || 0
		const appearMb = element.dataset.appearMb ? element.dataset.appearMb : true

		console.log('appearMb --> ', appearMb)
		if (appearMb === "false" && isPhone) return
		const trigger = element.dataset.trigger
			? document.querySelector(`[data-parent="${element.dataset.trigger}"]`) 
			: element

		let delay = element.dataset.delay || 0 + (0.1 * order)
		let y = element.dataset.y || 30 + (5 * order)
		let x = element.dataset.x || 0
		let opacity = element.dataset.opacity || 0
		const duration = element.dataset.t || 1
		gsap.fromTo(element, {
			opacity,
			y,
			x,
		}, {
			opacity: 1,
			y: 0,
			x: 0,
			delay,
			duration,
			scrollTrigger: {
				trigger, 
				start: "10% 80%",
				end: "100% 70%",
			}
		});
	})

	const characterBG1  =  document.querySelector('[data-character-bg-1]')
	const characterBG2  =  document.querySelector('[data-character-bg-2]')
	const characterBG3  =  document.querySelector('[data-character-bg-3]')
	const characterBG4  =  document.querySelector('[data-character-bg-4]')

	gsap.from(characterBG1, {
		y: -80 * 2.2,
		duration: 3,
		scrollTrigger: {
			trigger: '[data-character-trigger]', 
			start: "0% 100%",
			end: "100% 0%",
			scrub: true,
		}
	});
	const characters =  document.querySelectorAll('[data-character]')
	characters.forEach((character, i) => {
		gsap.from(character, {
		y: -80,
			duration: 3,
			scrollTrigger: {
				trigger: '[data-character-trigger]', 
				start: "0% 100%",
				end: "100% 0%",
				scrub: true,
			}
		});
	})
	gsap.from(characterBG2, {
		y: -100 * 2.5,
		duration: 3,
		scrollTrigger: {
			trigger: '[data-character-trigger]', 
			start: "0% 100%",
			end: "100% 0%",
			scrub: true,
		}
	});
	gsap.from(characterBG3, {
		y: -90 * 4.2,
		duration: 3,
		scrollTrigger: {
			trigger: '[data-character-trigger]', 
			start: "0% 100%",
			end: "100% 00%",
			scrub: true,
		}
	});
	gsap.from(characterBG4, {
		y: -80 * 7.5,
		duration: 3,
		scrollTrigger: {
			trigger: '[data-character-trigger]', 
			start: "0% 100%",
			end: "100% 0%",
			scrub: true,
		}
	});
	
	
	document.addEventListener("DOMContentLoaded", function() {
		initSwiper()
		initTicker()
  
	});
  
	function initSwiper() {
	//   const swiperData = JSON.parse(document.querySelectorAll(`.hero-swiper`))
	  
	  const swiperLine = document.querySelector('[swiper-line]')
	  const swiperLabel = document.querySelector('[swiper-label]')
  
	  const prevBtn = document.querySelectorAll('[data-prev="hero-swiper"]')
	  const nextBtn = document.querySelectorAll('[data-next="hero-swiper"]')
	  const swipers = document.querySelectorAll('.hero-swiper')
		if (!swipers || !prevBtn || !nextBtn) return
	  
	  swipers.forEach(item => {
		const swiper = new Swiper(item, {
		// Optional parameters
		modules: [Autoplay],
		direction: "horizontal",
		loop: true,
		effect: "coverflow",
		slidesPerView: 1.2,
		centeredSlides: true,
		spaceBetween: 10,
		speed: 700,
		autoplay: {
		  delay: 2000,
		  disableOnInteraction: false,
		},
	  });
	  swiper.on('transitionStart', () => {
			swiperLine.classList.add('hide-line')
			swiperLabel.classList.add('hide-text')
	  })
  
	  swiper.on('sliderMove', () => {
			swiperLine.classList.add('hide-line')
			swiperLabel.classList.add('hide-text')
	  })
	  swiper.on('transitionEnd', (e) => {
			swiperLabel.innerText = "s"
			swiperLine.classList.remove('hide-line')
			swiperLabel.classList.remove('hide-text')
	  })
	  prevBtn.forEach(btn => {
		btn.addEventListener('click', () => {
			swiper.slidePrev()
	  	})
	  })
	  nextBtn.forEach(btn => {
		btn.addEventListener('click', () => {
			swiper.slideNext()
	  })
	  })
  
	  
	  })
	 
	  
	}
	
	
	function initTicker() {
	  const tickers = document.querySelectorAll('[data-ticker]');
	  console.log('tickers', tickers)
	  tickers.forEach(ticker => {

		const list = ticker.querySelector('.ticker__list');
		const clone = list.cloneNode(true);
		ticker.appendChild(clone);
		slider(ticker)
	  })
  
	  }
	  function slider(ticker){
		// const event = new CustomEvent('reinit-sliders');
		// document.dispatchEvent(event);
  
  
		let currentScroll = 0;
		const maxScroll = ticker.scrollWidth / 2;
		const scrollSpeed = 2;
		let isManualScrolling = false;
		let isCursorOverTicker = false;
		let scriptResetScroll = false;
		const tickerDir = ticker.dataset.dir
		if (tickerDir === 'right') {
			ticker.scrollLeft = maxScroll;
		}
		console.log(ticker.scrollLeft,"scrollLeft");
		function updateScroll() {
			if (isManualScrolling) {
				requestAnimationFrame(updateScroll);
				return;
			}


			if (tickerDir === 'right') {
				currentScroll -= scrollSpeed;
			} else {
				currentScroll += scrollSpeed;
			}

  
			if (currentScroll >= maxScroll) {
				scriptResetScroll = true;
				ticker.scrollLeft = 0;
				currentScroll = 0;
			} else {
				ticker.scrollLeft = currentScroll;
			}
  
			requestAnimationFrame(updateScroll);
		}
		updateScroll();
  
		  function handleManualScroll() {
			  if (scriptResetScroll) {
				  scriptResetScroll = false;
				  return;
			  }
  
			  const newScrollLeft = ticker.scrollLeft;
			  // console.log('newScrollLeft', newScrollLeft)
			  if (newScrollLeft <= 0) {
				  // User scrolled left past the start
				  scriptResetScroll = true;
				  ticker.scrollLeft = maxScroll;
				  currentScroll = maxScroll;
			  } else if (newScrollLeft >= maxScroll) {
				  // User scrolled right past the halfway point
				  scriptResetScroll = true;
				  ticker.scrollLeft = 0;
				  currentScroll = 0;
			  }
		  }
  
		  ticker.addEventListener('scroll', handleManualScroll);
  
		  ticker.addEventListener('mouseenter', () => {
			  isManualScrolling = true;
			  isCursorOverTicker = true;
		  });
  
		  ticker.addEventListener('touchstart', () => {
			isManualScrolling = true;
			isCursorOverTicker = true;
		  });
		  
		  ticker.addEventListener('mouseleave', () => {
			  isManualScrolling = false;
			  isCursorOverTicker = false;
			  currentScroll = ticker?.scrollLeft
		  });
  
		  ticker.addEventListener('touchend', () => {
			  isManualScrolling = false;
			  isCursorOverTicker = false;
			  currentScroll = ticker?.scrollLeft
		  });
		  ticker?.addEventListener('scrollend', () => {
			if (isManualScrolling && !isCursorOverTicker)  {
			  isManualScrolling = false;
			  currentScroll = ticker?.scrollLeft
			}
		  });
	  }

		const heroSectionBg = document.querySelector('[data-hero-section-bg]')
		const heroSectionStudent = document.querySelector('[data-hero-section-student]')

		gsap.to(heroSectionStudent, {
			y: -300,
			scale: 1.1,
			duration: 3,
			scrollTrigger: {
				trigger: '[data-hero-section-parallax]', 
				start: "70% 90%",
				end: "90% 0%",
				// markers: true,
				scrub: true
			}
		});
		gsap.to(heroSectionBg, {
			y: 190,
			scale: 1.1,
			duration: 3,
			scrollTrigger: {
				immediateRender: false,
				trigger: '[data-hero-section-parallax]', 
				start: "70% 90%",
				end: "90% 0%",
				// markers: true,
				scrub: true
			}
		});

		gsap.to('[data-hero-arya]', {
			scale: 1.1,
			y: -20,
			// opacity: 0,
			// opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: heroSectionBg, 
				start: "100% 90%",
				end: "180% 40%",
				scrub: true
			}
		})
		gsap.to('[data-baloon]', {
			scale: 1.1,
			y: -100,
			// opacity: 0,
			// opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: heroSectionBg, 
				start: "100% 90%",
				end: "180% 40%",
				scrub: true,
			}
		})

		gsap.to('[data-hero-elephant]', {
			y: -240,
			duration: 3,
			scrollTrigger: {
				trigger: '[data-hero-section-parallax]', 
				start: "75% 90%",
				end: "180% 40%",
				scrub: true,
			}
		})

		gsap.to('[data-hero-elephant-shadow]', {
			scale: 0.1,
			duration: 3,
			scrollTrigger: {
				trigger: '[data-hero-section-parallax]', 
				start: "75% 90%",
				end: "180% 40%",
				scrub: true,
			}
		})
  
		gsap.to('[data-bottom-cloud]', {
			scale: 1.1,
			opacity: 1,
			y: -250,
			// opacity: 0,
			// opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: heroSectionParallax, 
				start: "100% 130%",
				end: "180% 40%",
				scrub: true,
			}
		})


		document.addEventListener("DOMContentLoaded", function() {
			// select all the links that ends with #, 
			// if it starts with #, then prevent default and smooth scroll to the target - 100px
			// if it starts with /, then prevent default, 
			//     --> if current url is not the same as the target
			//     		--> navigate to the target 
			//     --> if current url is same as the target
			//     		--> prevent default and smooth scroll to the target - 100px


			const removeHash = (url) => {
				return url.replace(/#.*$/, '');
			}

			const getHash = (url) => {
				return url.replace(/.*#/, '');
			}

			const links = document.querySelectorAll('a[href*="#"]');

			console.log('links', links)

			links.forEach(link => {
				link.addEventListener('click', (e) => {

					console.log('link', link)
						e.preventDefault();

					const href = link.getAttribute('href');
					if (href.startsWith('#')) {
						// e.preventDefault();
							const target = document.getElementById(getHash(href));
							if (target) {
								const top = target.getBoundingClientRect().top + window.pageYOffset;
								window.scrollTo({
									top: top,
									behavior: 'smooth'
								});
							}
					} else if (href.startsWith('/')) {
						// e.preventDefault();
						const target = href;
						if (removeHash(window.location.pathname) !== removeHash(target)) {
							window.location.href = target;
						} else {
							const target = document.getElementById(getHash(href));
							if (target) {
								const top = target.getBoundingClientRect().top + window.pageYOffset;

								console.log('target Hitt...', target, top)
								window.scrollTo({
									top: top,
									behavior: 'smooth'
								});
							}
						}
					}
				});
			});



		});
  
  </script>
